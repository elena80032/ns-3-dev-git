# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

# def options(opt):
#     pass

# def configure(conf):
#     conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')

def build(bld):
    module = bld.create_ns3_module('c2ml', ['core', 'network', 'internet'])
    module.source = [
        'model/client/cc-l45-protocol.cc',
        'model/client/tcp-newreno-mw.cc',
        'model/client/tcp-westwood-mw.cc',
        'model/client/tcp-cubic-mw.cc',
        'model/client/tcp-attacker.cc',
        'model/client/tcp-dumb.cc',
        'model/client/tcp-bic-mw.cc',
        'model/client/tcp-hstcp-mw.cc',
        'model/client/tcp-hybla-mw.cc',
        'model/client/tcp-noordwijk-mw.cc',
        'model/gateway/c2ml-rx-queue.cc',
        'model/gateway/c2ml-tx-queue.cc',
        'model/gateway/c2ml-gateway.cc',
        'model/gateway/unweightedfairbudget.cc',
        'model/gateway/fc2ap.cc',
        'model/gateway/dybra.cc',
        'model/c2ml-struct.cc',
        ]

    module_test = bld.create_ns3_module_test_library('c2ml')
    module_test.source = [
        ]

    headers = bld(features='ns3header')
    headers.module = 'c2ml'
    headers.source = [
        'model/client/cc-l45-protocol.h',
        'model/client/tcp-newreno-mw.h',
        'model/client/tcp-westwood-mw.h',
        'model/client/tcp-noordwijk-mw.h',
        'model/client/tcp-cubic-mw.h',
        'model/client/tcp-attacker.h',
        'model/client/tcp-dumb.h',
        'model/client/tcp-bic-mw.h',
        'model/client/tcp-hstcp-mw.h',
        'model/client/tcp-hybla-mw.h',
        'model/client/tcp-mw.h',
        'model/gateway/c2ml-rx-queue.h',
        'model/gateway/c2ml-tx-queue.h',
        'model/gateway/c2ml-gateway.h',
        'model/gateway/unweightedfairbudget.h',
        'model/gateway/bwsharingprotocol.h',
        'model/c2ml-struct.h',
        'model/gateway/fc2ap.h',
        'model/gateway/dybra.h',
        ]

    if bld.env.ENABLE_EXAMPLES:
        bld.recurse('examples')

    # bld.ns3_python_bindings()

